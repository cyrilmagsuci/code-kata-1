// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250720082102_Create_Entites")]
    partial class Create_Entites
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Checkout.Checkout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("PromoCodes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("promo_codes");

                    b.Property<Guid>("UserSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_session_id");

                    b.HasKey("Id")
                        .HasName("pk_checkouts");

                    b.ToTable("checkouts", "public");
                });

            modelBuilder.Entity("Domain.Checkout.CheckoutItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CheckoutId")
                        .HasColumnType("uuid")
                        .HasColumnName("checkout_id");

                    b.ComplexProperty<Dictionary<string, object>>("Quantity", "Domain.Checkout.CheckoutItem.Quantity#Quantity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("quantity");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Sku", "Domain.Checkout.CheckoutItem.Sku#Sku", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sku");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UnitOfMeasure", "Domain.Checkout.CheckoutItem.UnitOfMeasure#UnitOfMeasure", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("uom");
                        });

                    b.HasKey("Id")
                        .HasName("pk_checkout_items");

                    b.HasIndex("CheckoutId")
                        .HasDatabaseName("ix_checkout_items_checkout_id");

                    b.ToTable("checkout_items", "public");
                });

            modelBuilder.Entity("Domain.Checkout.PricingRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsBundle")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bundle");

                    b.ComplexProperty<Dictionary<string, object>>("PricePerUnit", "Domain.Checkout.PricingRule.PricePerUnit#PricePerUnit", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("price_per_unit");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PromoCode", "Domain.Checkout.PricingRule.PromoCode#PromoCode", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("promo_code");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Quantity", "Domain.Checkout.PricingRule.Quantity#Quantity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("quantity");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Sku", "Domain.Checkout.PricingRule.Sku#Sku", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sku");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UnitOfMeasure", "Domain.Checkout.PricingRule.UnitOfMeasure#UnitOfMeasure", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("uom");
                        });

                    b.HasKey("Id")
                        .HasName("pk_pricing_rules");

                    b.ToTable("pricing_rules", "public");
                });

            modelBuilder.Entity("Domain.Checkout.CheckoutItem", b =>
                {
                    b.HasOne("Domain.Checkout.Checkout", null)
                        .WithMany("CheckoutItems")
                        .HasForeignKey("CheckoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_checkout_items_checkouts_checkout_id");
                });

            modelBuilder.Entity("Domain.Checkout.Checkout", b =>
                {
                    b.Navigation("CheckoutItems");
                });
#pragma warning restore 612, 618
        }
    }
}
